(()=>{(function(){if(window.rtcstats){console.warn("[RTCStats] Already declared");return}window.rtcstats=this;let c=document.currentScript.getAttribute("test_id")||crypto.randomUUID(),o=document.currentScript.getAttribute("client_id")||crypto.randomUUID(),a=document.currentScript.getAttribute("report_interval")||1,l=document.currentScript.getAttribute("write_interval")||5,n={report_interval:a,write_interval:l,test_id:c,client_id:o},r=[];async function h(e){console.info("RTCStats] Logging data...",e)}async function d(e){let t=[];e.forEach(i=>{let s=i.splice(0,i.length).forEach(u=>t.push({test_id:n.test_id,data:u}))}),t.length&&h(t)}class _ extends RTCPeerConnection{constructor(t){super(),this.batch=[],this.report_num=0,this.connection_id=crypto.randomUUID(),r.push(this),console.warn("PeerConnection instantiated",this),this.addEventListener("connectionstatechange",()=>{clearInterval(this._statsInterval),this.connectionState==="connected"&&(this._getStats(this.getStats()),this._statsInterval=setInterval(()=>{if(this.connectionState!=="connected")return clearInterval(this._statsInterval);this._getStats(this.getStats())},n.report_interval*1e3))})}async _getStats(t){let i=await t,s=Object.fromEntries(i.entries());s&&(this.batch.push({clientId:n.client_id,testId:n.test_id,connectionId:this.connection_id,reportNum:this.report_num,...s}),this.report_num+=1)}}["test_id","client_id"].every(e=>e in n)?(console.info("[RTCStats] Init with config:",n),RTCPeerConnection=_,setInterval(()=>{if(!r.length)return;let e=r.filter(t=>t.batch.length).map(t=>t.batch);e.length&&d(e)},n.write_interval*1e3)):console.warn("[RTCStats] Missing config keys. Exiting")})();})();
//# sourceMappingURL=rtcstats.js.map
